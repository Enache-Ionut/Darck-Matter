

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")
    <script async defer
            src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBph4ZtJpF5M0Jl53MwdwvZytqGzauEf1M&callback=initAutocomplete&libraries=places">
    </script>
</head>
<script>
    //function mapHeight() {
    //    return document.getElementsByClassName("body-content")[0].clientHeight;
    //}
    //document.getElementById("map").clientHeight = mapHeight();

    //function disableScrollwheel(map) {
    //    if (map) map.setOptions({ scrollwheel: false });
    //}
    //disableScrollwheel();

    var keepLocation = false;
    var currentLocation;
    var markers = [];

    function initAutocomplete() {
        var map = new google.maps.Map(document.getElementById('map'), {
            center: { lat: -33.8688, lng: 151.2195 },
            zoom: 10,
            disableDefaultUI: true
        });
        displayFire(map);
        // Create the search box and link it to the UI element.
        var input = document.getElementById('pac-input');
        var searchBox = new google.maps.places.SearchBox(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

        // Bias the SearchBox results towards current map's viewport.
        map.addListener('bounds_changed', function () {
            searchBox.setBounds(map.getBounds());
        });

        var markers = [];
        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener('places_changed', function () {
            var places = searchBox.getPlaces();

            if (places.length == 0) {
                return;
            }

            // Clear out the old markers.
            markers.forEach(function (marker) {
                marker.setMap(null);
            });
            markers = [];

            // For each place, get the icon, name and location.
            var bounds = new google.maps.LatLngBounds();
            places.forEach(function (place) {
                if (!place.geometry) {
                    console.log("Returned place contains no geometry");
                    return;
                }
                var icon = {
                    url: place.icon,
                    size: new google.maps.Size(71, 71),
                    origin: new google.maps.Point(0, 0),
                    anchor: new google.maps.Point(17, 34),
                    scaledSize: new google.maps.Size(25, 25)
                };

                // Create a marker for each place.
                markers.push(new google.maps.Marker({
                    map: map,
                    icon: icon,
                    title: place.name,
                    position: place.geometry.location
                }));

                if (place.geometry.viewport) {
                    // Only geocodes have viewport.
                    bounds.union(place.geometry.viewport);
                } else {
                    bounds.extend(place.geometry.location);
                }
            });
            map.fitBounds(bounds);
        });

        map.addListener('click', function (e) {
            placeMarker(e.latLng, map);
        });
    }

    function reportFire() {
        keepLocation = true;
        console.log("fire reported");
    }


    function placeMarker(position, map) {
        // if last pin was not reported, then remove it
        if (!keepLocation && markers.length > 0)
            markers[markers.length - 1].setMap(null);

        keepLocation = false;
        currentLocation = position;
        var marker = new google.maps.Marker({
            position: position,
            map: map
        });
        map.panTo(position);

        // store marker
        markers.push(marker);
    }

</script>
<body>
    <div class="navbar navbar-inverse navbar-dark navbar-fixed-top bg-dark flex-md-nowrap p-0 shadow">
        <div class="navbar-header">
            <a class="navbar-brand">Spot The Fire</a>
        </div>
    </div>

    <div class="body-content">
        @RenderBody()
    </div>

    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    @RenderSection("scripts", required: false)
</body>
<style>
    #description {
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
    }

    #infowindow-content .title {
        font-weight: bold;
    }

    #infowindow-content {
        display: none;
    }

    #map #infowindow-content {
        display: inline;
    }

    .pac-card {
        margin: 10px 10px 0 0;
        border-radius: 2px 0 0 2px;
        box-sizing: border-box;
        -moz-box-sizing: border-box;
        outline: none;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
        background-color: #fff;
        font-family: Roboto;
    }

    #pac-container {
        padding-bottom: 12px;
        margin-right: 12px;
    }

    .pac-controls {
        display: inline-block;
        padding: 5px 11px;
    }

    .pac-controls label {
        font-family: Roboto;
        font-size: 13px;
        font-weight: 300;
    }

    #pac-input {
        background-color: #fff;
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
        margin-left: 12px;
        padding: 0 11px 0 13px;
        text-overflow: ellipsis;
        width: 400px;


        position: absolute;
        top: 30px !important;
        left: 30px !important;
    }

    #pac-input:focus {
        border-color: #4d90fe;
    }

    #title {
        color: #fff;
        background-color: #4d90fe;
        font-size: 25px;
        font-weight: 500;
        padding: 6px 12px;
    }

    #target {
        width: 345px;
    }
</style>
</html>
